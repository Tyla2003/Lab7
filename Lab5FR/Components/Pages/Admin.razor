@page "/admin"
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Lab5FR.Services
@using Lab5FR.Models
@inject Lab5FR.Services.LibraryService Library

<h3 class="mb-4">Admin Dashboard</h3>

<!-- Admin Section Navigation -->
<div class="btn-group mb-4" role="group">
    <button class="btn btn-outline-primary" @onclick="() => SetSection(AdminSection.ViewEditUsers)">View/Edit Users</button>
    <button class="btn btn-outline-secondary" @onclick="() => SetSection(AdminSection.ViewCheckedOutBooks)">View Checked Out Books</button>
    <button class="btn btn-outline-success" @onclick="() => SetSection(AdminSection.MaintainLibrary)">Maintain Library</button>
</div>

<hr />

<!-- View/Edit Users Section -->
@if (currentSection == AdminSection.ViewEditUsers)
{
    <h4>Manage Users</h4>

    <div class="input-group mb-3">
        <input class="form-control" placeholder="Search by Name..." @bind="searchUserQuery" />
        <button class="btn btn-primary" @onclick="SearchUsers">Search</button>
        <button class="btn btn-secondary ms-2" @onclick="ViewAllUsers">View All Users</button>
        <button class="btn btn-success ms-2" @onclick="ShowCreateUserForm">Create New User</button>
    </div>

    @if (showCreateUserForm)
    {
        <div class="card p-3 mb-4">
            <h5>Create New User</h5>
            <input class="form-control mb-2" placeholder="Name" @bind="newUserName" />
            <input class="form-control mb-2" type="email" placeholder="Email" @bind="newUserEmail" />
            <button class="btn btn-success" @onclick="CreateUser">Submit</button>
            <button class="btn btn-secondary ms-2" @onclick="CancelCreateUser">Cancel</button>
        </div>
    }

    @if (filteredUsers.Any())
    {
        <ul class="list-group">
            @foreach (var user in filteredUsers)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@user.Name</strong> — @user.Email

                        @if (Library.GetBorrowedBooksByUser(user.Id).Any())
                        {
                            <span class="badge bg-warning text-dark ms-2">Has Books</span>
                            <button class="btn btn-link btn-sm" @onclick="() => ToggleUserBooks(user.Id)">View Books</button>
                            @if (expandedUsers.Contains(user.Id))
                            {
                                <ul class="ms-4 mt-2">
                                    @foreach (var book in Library.GetBorrowedBooksByUser(user.Id))
                                    {
                                        <li>@book.Title by @book.Author</li>
                                    }
                                </ul>
                            }
                        }
                    </div>
                    <div>
                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => BeginEditUser(user)">Edit</button>
                        @if (Library.GetBorrowedBooksByUser(user.Id).Any())
                        {
                            <button class="btn btn-sm btn-outline-secondary" disabled>Delete</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteUser(user.Id)">Delete</button>
                        }
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="text-muted mt-2">No users found.</p>
    }
    @if (userBeingEdited != null)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content p-3">
                    <h5>Edit User</h5>
                    <input class="form-control mb-2" @bind="editedName" placeholder="Name" />
                    <input class="form-control mb-2" @bind="editedEmail" placeholder="Email" type="email" />
                    <div class="text-end">
                        <button class="btn btn-success me-2" @onclick="SubmitEditUser">Save</button>
                        <button class="btn btn-secondary" @onclick="CancelEditUser">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (userIdPendingDelete != null)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content p-3">
                    <h5>Confirm Delete</h5>
                    <p>Are you sure you want to delete this user?</p>
                    <div class="text-end">
                        <button class="btn btn-danger me-2" @onclick="ConfirmDeleteUserNow">Yes, Delete</button>
                        <button class="btn btn-secondary" @onclick="CancelDeleteUser">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
@if (currentSection == AdminSection.ViewCheckedOutBooks)
{
    <h4 class="mt-4">Checked Out Books</h4>

    @if (Library.GetAllBorrowedBooks().Any())
    {
        <ul class="list-group">
            @foreach (var (book, user) in Library.GetAllBorrowedBooks())
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@book.Title</strong> by @book.Author <br />
                        <small>Checked out by: @user.Name (@user.Email)</small>
                    </div>
                    <button class="btn btn-warning" @onclick="() => ReturnBook(book.Id, user.Id)">Return</button>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No books are currently checked out.</p>
    }
}
@if (currentSection == AdminSection.MaintainLibrary)
    {
        <h4>Maintain Library</h4>

        <!-- Add New Book Form -->
    <!-- Book Controls -->
    <div class="mb-3 d-flex justify-content-between">
        <div class="input-group w-50">
            <input class="form-control" placeholder="Search by title or author..." @bind="bookSearchQuery" />
        </div>
        <button class="btn btn-success" @onclick="() => showAddBookForm = true">Add Book</button>
    </div>

        <!-- All Books List -->
    @if (filteredBooks.Any())
        {
            <ul class="list-group">
            @foreach (var book in filteredBooks)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@book.Title</strong> by @book.Author (ISBN: @book.ISBN)

                            @if (Library.IsBookAvailable(book.Id))
                            {
                                <span class="badge bg-success ms-2">Available</span>
                            }
                            else
                            {
                                <span class="badge bg-danger ms-2">Checked Out</span>
                            }
                        </div>

                        <div>
                            @if (Library.IsBookAvailable(book.Id))
                            {
                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => BeginEditBook(book)">Edit</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteBook(book.Id)">Delete</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-secondary me-2" disabled>Edit</button>
                                <button class="btn btn-sm btn-outline-secondary" disabled>Delete</button>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No books found.</p>
        }

        @if (bookBeingEdited != null)
        {
            <div class="modal-backdrop fade show"></div>
            <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content p-3">
                        <h5>Edit Book</h5>
                        <input class="form-control mb-2" @bind="editedBookTitle" placeholder="Title" />
                        <input class="form-control mb-2" @bind="editedBookAuthor" placeholder="Author" />
                        <input class="form-control mb-2" @bind="editedBookISBN" placeholder="ISBN" />
                        <div class="text-end">
                            <button class="btn btn-success me-2" @onclick="SubmitEditBook">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEditBook">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    @if (showAddBookForm)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content p-3">
                    <h5>Add New Book</h5>
                    <input class="form-control mb-2" placeholder="Title" @bind="newBookTitle" />
                    <input class="form-control mb-2" placeholder="Author" @bind="newBookAuthor" />
                    <input class="form-control mb-2" placeholder="ISBN" @bind="newBookISBN" />
                    <div class="text-end">
                        <button class="btn btn-success me-2" @onclick="AddBook">Add</button>
                        <button class="btn btn-secondary" @onclick="() => showAddBookForm = false">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (bookIdPendingDelete != null)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content p-3">
                    <h5>Confirm Book Deletion</h5>
                    <p>Are you sure you want to delete this book?</p>
                    <div class="text-end">
                        <button class="btn btn-danger me-2" @onclick="ConfirmDeleteBookNow">Yes, Delete</button>
                        <button class="btn btn-secondary" @onclick="CancelDeleteBook">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }

}
@code {
    private enum AdminSection { None, ViewEditUsers, ViewCheckedOutBooks, MaintainLibrary }
    private AdminSection currentSection = AdminSection.None;

    private string searchUserQuery = "";
    private List<User> filteredUsers = new();
    private string newUserName = "";
    private string newUserEmail = "";
    private bool showCreateUserForm = false;
    private HashSet<int> expandedUsers = new();

    private User? userBeingEdited = null;
    private string editedName = "";
    private string editedEmail = "";
    private int? userIdPendingDelete = null;


    private void SetSection(AdminSection section)
    {
        currentSection = section;
        searchUserQuery = "";
        filteredUsers.Clear();
        showCreateUserForm = false;
    }

    private void ViewAllUsers()
    {
        filteredUsers = Library.GetUsers().ToList();
    }

    private void SearchUsers()
    {
        var allUsers = Library.GetUsers();
        filteredUsers = allUsers
            .Where(u => u.Name.Contains(searchUserQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void ShowCreateUserForm()
    {
        showCreateUserForm = true;
    }

    private void CancelCreateUser()
    {
        showCreateUserForm = false;
        newUserName = "";
        newUserEmail = "";
    }

    private void CreateUser()
    {
        if (!string.IsNullOrWhiteSpace(newUserName) && !string.IsNullOrWhiteSpace(newUserEmail))
        {
            Library.AddUser(new User { Name = newUserName, Email = newUserEmail });
            CancelCreateUser();
            ViewAllUsers();
        }
    }

    private void BeginEditUser(User user)
    {
        userBeingEdited = user;
        editedName = user.Name;
        editedEmail = user.Email;
    }

    private void CancelEditUser()
    {
        userBeingEdited = null;
        editedName = "";
        editedEmail = "";
    }

    private void SubmitEditUser()
    {
        if (userBeingEdited != null && !string.IsNullOrWhiteSpace(editedName) && !string.IsNullOrWhiteSpace(editedEmail))
        {
            userBeingEdited.Name = editedName;
            userBeingEdited.Email = editedEmail;
            Library.UpdateUser(userBeingEdited);
            userBeingEdited = null;
            ViewAllUsers(); // Refresh UI
        }
    }

    private void ConfirmDeleteUser(int userId)
    {
        userIdPendingDelete = userId;
    }

    private void CancelDeleteUser()
    {
        userIdPendingDelete = null;
    }

    private void ConfirmDeleteUserNow()
    {
        if (userIdPendingDelete != null)
        {
            Library.DeleteUser(userIdPendingDelete.Value);
            userIdPendingDelete = null;
            ViewAllUsers();
        }
    }

    private void ReturnBook(int bookId, int userId)
    {
        Library.ReturnBook(userId, bookId);
    }


    private void ToggleUserBooks(int userId)
    {
        if (expandedUsers.Contains(userId))
            expandedUsers.Remove(userId);
        else
            expandedUsers.Add(userId);
    }

    private string newBookTitle = "";
    private string newBookAuthor = "";
    private string newBookISBN = "";

    private void AddBook()
    {
        if (!string.IsNullOrWhiteSpace(newBookTitle) &&
            !string.IsNullOrWhiteSpace(newBookAuthor) &&
            !string.IsNullOrWhiteSpace(newBookISBN))
        {
            var newBook = new Book
                {
                    Title = newBookTitle,
                    Author = newBookAuthor,
                    ISBN = newBookISBN
                };

            Library.AddBook(newBook);

            // Clear fields
            newBookTitle = "";
            newBookAuthor = "";
            newBookISBN = "";
        }
    }

    private Book? bookBeingEdited = null;
    private string editedBookTitle = "";
    private string editedBookAuthor = "";
    private string editedBookISBN = "";

    private void BeginEditBook(Book book)
    {
        bookBeingEdited = book;
        editedBookTitle = book.Title;
        editedBookAuthor = book.Author;
        editedBookISBN = book.ISBN;
    }

    private void CancelEditBook()
    {
        bookBeingEdited = null;
        editedBookTitle = "";
        editedBookAuthor = "";
        editedBookISBN = "";
    }

    private void SubmitEditBook()
    {
        if (bookBeingEdited != null &&
            !string.IsNullOrWhiteSpace(editedBookTitle) &&
            !string.IsNullOrWhiteSpace(editedBookAuthor) &&
            !string.IsNullOrWhiteSpace(editedBookISBN))
        {
            bookBeingEdited.Title = editedBookTitle;
            bookBeingEdited.Author = editedBookAuthor;
            bookBeingEdited.ISBN = editedBookISBN;

            Library.UpdateBook(bookBeingEdited);

            CancelEditBook(); // Close modal
        }
    }

    private bool showAddBookForm = false;
    private string bookSearchQuery = "";
    private List<Book> filteredBooks => string.IsNullOrWhiteSpace(bookSearchQuery)
        ? Library.GetAllBooks()
        : Library.GetAllBooks().Where(b =>
            b.Title.Contains(bookSearchQuery, StringComparison.OrdinalIgnoreCase) ||
            b.Author.Contains(bookSearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

    private int? bookIdPendingDelete = null;

    private void ConfirmDeleteBook(int bookId)
    {
        bookIdPendingDelete = bookId;
    }

    private void CancelDeleteBook()
    {
        bookIdPendingDelete = null;
    }

    private void ConfirmDeleteBookNow()
    {
        if (bookIdPendingDelete != null)
        {
            Library.DeleteBook(bookIdPendingDelete.Value);
            bookIdPendingDelete = null;
        }
    }

}
